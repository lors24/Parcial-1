\documentclass{article}

\title{Tarea 1}
\author{Lorena Dominguez Ponce}

\begin{document}

\maketitle
<<Librerias>>=
library(ggplot2)
library(plyr)
library(reshape2)
library(kknn)
library(dplyr)
library(ISLR)
@

\section{Ejercicio 1}
<<Ejercicio1>>=

# Queremos predecir el salario de un beisbolista 
# en funcion de varias estadisticas
# que describen su desempeño

# head(Hitters)
dim(Hitters) #Tenemos informacion sobre 322 bateadores, con 20 variables

# Vemos si tenemos Missing Values

complete <- sapply(1:ncol(Hitters), function(i){
    s <- sum(complete.cases(Hitters[,i]))
})
casos.completos <- data.frame(names(Hitters), complete)
casos.completos

# Vemos que la unica variable en la que hay Missing Values es Salary,
# pero es justo la que queremos predecir

322-263
263/322

# Si quitamos los 59 NA nos quedariamos con el 80% de los datos originales

Hitters.1 <- Hitters[complete.cases(Hitters),]
row.names(Hitters.1) = NULL
Hitters.1$id = 1:nrow(Hitters.1)

# Apartamos una muestra de prueba de tamaño 100, el resto sera de entrenamiento

N <- 100
indices.entrena <- sample(Hitters.1$id, N)
hitters.entrena <-filter(Hitters.1, !(id %in% indices.entrena))
hitters.prueba <- filter(Hitters.1, id %in% indices.entrena)
@

\section{Ejercicio 2}
<<Ejercicio2>>=

#100 muestras de entrenamiento de tamaño 30

# conjunto de prueba 
xp <- runif(50)
yp <- abs(xp-0.5) + rnorm(length(xp), mean = 0, sd = 1)
datos.prueba <- data.frame(xp, yp)

salida.sim.lista <- lapply(1:100, function(i){
    x <- runif(30)
    y <- abs(x-0.5) + rnorm(length(x), mean = 0, sd = 1)
    datos <- data.frame(x,y)
    f.hat <- kknn(y ~ x, 
                  train = datos, 
                  test = datos,
                  k = 3, kernel = 'rectangular')
    error.entrena <- mean((fitted(f.hat) - datos$y)^2)
  
    # datos de prueba
    
    
    f.hat2 <- kknn(yp ~ xp,
                  train = datos,
                  test = datos.prueba,
                  k = 3, kernel = 'rectangular')
    error.prueba <- mean((fitted(f.hat2)-datos.prueba$yp)^2)     
    
    data.frame(muestra = i,error.entrena, error.prueba)
})

salida.sim <- rbind_all(salida.sim.lista)
sal.m <- melt(salida.sim, id.vars='muestra')

ggplot(sal.m,
       aes(x = muestra, y = value, col = variable, group = variable)) + geom_line() +
    geom_point()

@

\section{Ejercicio 3}
<<Ejercicio3>>=

xp = 0.5
yp = abs(0.5-0.5) + rnorm(1,0,1)
sim.prueba <- data.frame(xp,yp)

k=3
error <-rdply(1000, function(i){                     
x <- 0:20/20
y <- abs(x-.5) + rnorm(length(x), 0 ,1)
sim.datos <- data.frame(id=0:20,x,y)
vecino.k.prueba <- kknn(y ~ x, 
                        train = sim.datos, 
                        test = sim.prueba,
                        k=k, kernel='rectangular')
error <- (fitted(vecino.k.prueba)-sim.prueba$y)^2
sesgo <- (fitted(vecino.k.prueba)/k)^2
var <- 1/k
data.frame(error = error, sesgo = sesgo, var = var)
})

error$sum <- error$sesgo+error$var+1

err.p <- mean(error$error)
err.p

data.frame(k =i, prueba = prueba)


errores.vmc <- ldply(c(1,3,6), function(i){
    
    vecino.k.prueba <- kknn(y ~ x, 
                            train = sim.datos, 
                            test = sim.prueba,
                            k=i, kernel='rectangular')
     prueba <- mean((fitted(vecino.k.prueba)-sim.prueba$y)^2)
     data.frame(k =i, prueba = prueba)
})

errores.vmc


preds.1 <- rdply(100, function(i){
    x <- 0:20/20
    y <- abs(x-.5) + rnorm(length(x), 0 ,1)
    sim.datos <- data.frame(id=0:20,x,y)
    sim.prueba <- data.frame(x = 0.5, y = rnorm(1,0,1))
    salida.1 <- ldply(c(1,3,6), function(k){  #probamos varios valores de p
        vecino.k.prueba <- kknn(y ~ x, 
                                train = sim.datos, 
                                test = sim.prueba,
                                k=k, kernel='rectangular')
        prueba <- fitted(vecino.k.prueba)
        data.frame(k=k, prueba = prueba)
    })
    salida.1
})

preds.res <- preds.1 %>% 
    group_by(k) %>%
    dplyr::summarise(esperado = mean(prueba), var = var(prueba), ecm = mean((prueba-0)^2)) %>%
    mutate(sesgo = (esperado-1)^2)

preds.res

preds.res.1 <- preds.res %>%
    gather(variable,valor, esperado:sesgo) %>%
    filter(variable!='esperado')


ggplot(preds.res.1, aes(x=k, y=valor, colour=variable, group=variable)) +
    geom_line() + geom_point()
@

\end{document}